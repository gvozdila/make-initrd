AC_PREREQ([2.69])
AC_INIT([make-initrd],[2.24.0],[gladkov.alexey@gmail.com])
AC_CONFIG_SRCDIR([datasrc/getarg.c])
AC_CONFIG_HEADERS([config.h])

AC_PREFIX_DEFAULT([/usr])

sysconfdir=/etc
AC_SUBST([sysconfdir])

# Checks for programs.
AC_PROG_CC
AC_PROG_MAKE_SET
AC_PROG_MKDIR_P
AC_PROG_LN_S
AC_PROG_SED

m4_ifndef([PKG_PROG_PKG_CONFIG],
  [m4_fatal([Could not locate the pkg-config autoconf
    macros. These are usually located in /usr/share/aclocal/pkg.m4.
    If your macros are in a different location, try setting the
    environment variable AL_OPTS="-I/other/macro/dir" before running
    ./autogen.sh or autoreconf again. Make sure pkg-config is installed.])])
PKG_PROG_PKG_CONFIG

# Checks for header files.
AC_FUNC_ALLOCA
AC_CHECK_HEADERS([ \
		arpa/inet.h fcntl.h inttypes.h limits.h netinet/in.h stddef.h \
		stdint.h stdlib.h string.h sys/mount.h sys/param.h sys/socket.h \
		sys/time.h unistd.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_TYPE_UID_T
AC_C_INLINE
AC_TYPE_MODE_T
AC_TYPE_OFF_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_TYPE_SSIZE_T
AC_CHECK_MEMBERS([struct stat.st_rdev])
AC_TYPE_UINT16_T
AC_TYPE_UINT32_T

# Checks for library functions.
AC_FUNC_ERROR_AT_LINE
AC_FUNC_FORK
AC_HEADER_MAJOR
AC_FUNC_MALLOC
AC_FUNC_MMAP
AC_FUNC_REALLOC
AC_CHECK_FUNCS([ \
		clock_gettime gettimeofday inet_ntoa localtime_r memset munmap \
		regcomp setenv socket strchr strdup strerror strncasecmp strndup \
		strpbrk strrchr strstr strtol strtoul strtoull uname \
		twalk_r tdestroy updwtmp])

AC_MSG_CHECKING([if in-tree build is required])
AC_ARG_ENABLE(local-build,
	[AS_HELP_STRING(--enable-local-build,
			[Build the project to run from a tree (developer mode)])],
	[MKLOCAL=$enableval],[MKLOCAL=no])
AC_MSG_RESULT([${MKLOCAL}])
AC_SUBST([MKLOCAL])

if test "$MKLOCAL" != no; then
	localbuilddir=".build/dest"
else
	localbuilddir=""
fi
AC_SUBST([localbuilddir], [$localbuilddir])

AC_ARG_WITH([bootdir],
	[AS_HELP_STRING([--with-bootdir=DIR],
			[Directory for initramfs images (default: /boot)])],
	[], [with_bootdir='/boot'])
AC_SUBST([bootdir], [$with_bootdir])

AC_ARG_WITH([runtimedir],
	[AS_HELP_STRING([--with-runtimedir=DIR],
			[Directory for extra utilities for initramfs images
			 (default: /lib/initrd)])],
	[], [with_runtimedir='/lib/initrd'])
AC_SUBST([runtimedir], [$with_runtimedir])

AC_ARG_WITH([kbddir],
	[AS_HELP_STRING([--with-kbddir=DIR],
			[Directory where the console keymaps and fonts are located
			 (default: /lib/kbd)])],
	[], [with_kbddir='/lib/kbd'])
AC_SUBST([kbddir], [$with_kbddir])

AC_ARG_WITH([projectdir],
	[AS_HELP_STRING([--with-projectdir=DIR],
			[Directory for project data
			 (default: DATAROOTDIR/PACKAGE_NAME)])],
	[], [with_projectdir='${datarootdir}/${PACKAGE_NAME}'])
AC_SUBST([projectdir], [$with_projectdir])

AC_ARG_WITH([imagename],
	[AS_HELP_STRING([--with-imagename],
			[Initrd image name format (For example: 'initrd-$(KERNEL)$(IMAGE_SUFFIX).img' default: auto)])],
	[], [with_imagename='auto'])
AC_MSG_CHECKING([imagename format])
if test "$with_imagename" = "auto"; then
	with_imagename=""

	KERNEL="$(uname -r)"
	IMAGE_SUFFIX=

	for format in	'initrd-$(KERNEL)$(IMAGE_SUFFIX).img' \
			'initramfs-$(KERNEL)$(IMAGE_SUFFIX).img' \
			'initrd.img-$(KERNEL)$(IMAGE_SUFFIX)' \
			'initramfs.img-$(KERNEL)$(IMAGE_SUFFIX)' \
			'initrd-$(KERNEL)$(IMAGE_SUFFIX)' \
			'initramfs-$(KERNEL)$(IMAGE_SUFFIX)'; do
		eval "file=$bootdir/$(echo $format | tr '()' '{}')"
		if test -f "$file"; then
			test -z "$with_imagename" || AC_MSG_FAILURE(["Autodetection of image name format is ambiguous"])
			with_imagename="$format"
		fi
	done

	if test -z "$with_imagename"; then
		with_imagename='initrd-$(KERNEL)$(IMAGE_SUFFIX).img'
		AC_MSG_WARN(["Can't determinate image name format. Used default: $with_imagename"])
	fi
fi
AC_MSG_RESULT([$with_imagename])
with_imagename=$(echo "$with_imagename" | sed 's/\$/\$\$/g')
AC_SUBST([imagename], ["$with_imagename"])

AC_ARG_WITH([busybox],
	[AS_HELP_STRING([--with-busybox],
			[Use builtin busybox (default: auto)])],
	[],
	[: m4_divert_text([DEFAULTS], [with_busybox=auto])])
AC_MSG_CHECKING([if builtin busybox is required])
if test "$with_busybox" != "no"; then
	if test "$with_busybox" = "auto"; then
		with_busybox=no
		if ! test -x "$with_runtimedir/bin/busybox"; then
			with_busybox=yes
		fi
	fi
	if test "$with_busybox" = "yes" && ! test -f "$srcdir/external/busybox/upstream/Makefile"; then
		AC_MSG_FAILURE([submodule 'busybox' is out of sync])
	fi
fi
AC_MSG_RESULT([$with_busybox])
AC_SUBST([USE_BUSYBOX], [$with_busybox])

AC_ARG_WITH([libshell],
	[AS_HELP_STRING([--with-libshell],
			[Use builtin libshell (default: auto)])],
	[],
	[: m4_divert_text([DEFAULTS], [with_libshell=auto])])
AC_MSG_CHECKING([if builtin libshell is required])
if test "$with_libshell" != "no"; then
	if test "$with_libshell" = "auto"; then
		with_libshell=no
		if ! test -f "/bin/shell-error" && ! test -f "$bindir/shell-error"; then
			with_libshell=yes
		fi
	fi
	if test "$with_libshell" = "yes" && ! test -f "$srcdir/external/libshell/upstream/Makefile"; then
		AC_MSG_FAILURE([submodule 'libshell' is out of sync])
	fi
fi
AC_MSG_RESULT([$with_libshell])
AC_SUBST([USE_LIBSHELL], [$with_libshell])

AC_ARG_WITH([udevd],
	[AS_HELP_STRING([--with-udevd=FILE],
			[Path to udevd daemon (default: auto)])],
	[], [])
if ! test -x "$with_udevd"; then
	AC_PATH_PROGS([with_udevd], [udevd eudevd systemd-udevd], [],
		[/sbin:/usr/sbin:/usr/local/sbin:/bin:/usr/bin:/usr/local/bin:${sbindir}:${bindir}:/lib/systemd])
	if ! test -x "$with_udevd"; then
		AC_MSG_FAILURE([required utility not found: udevd])
	fi
fi
AC_SUBST([UDEVD], [$with_udevd])

AC_ARG_WITH([udevadm],
	[AS_HELP_STRING([--with-udevadm=FILE],
			[Path to udevadm utility (default: auto)])],
	[], [])
if ! test -x "$with_udevadm"; then
	AC_PATH_PROGS([with_udevadm], [udevadm eudevadm], [],
		[/sbin:/usr/sbin:/usr/local/sbin:/bin:/usr/bin:/usr/local/bin:${sbindir}:${bindir}:/lib/systemd])
	if ! test -x "$with_udevadm"; then
		AC_MSG_FAILURE([required utility not found: udevadm])
	fi
fi
AC_SUBST([UDEVADM], [$with_udevadm])

AC_PATH_PROGS([abduco_prog], [abduco], [],
	[/sbin:/usr/sbin:/usr/local/sbin:/bin:/usr/bin:/usr/local/bin:${sbindir}:${bindir}])
AC_SUBST([ABDUCO], [$abduco_prog])

AC_ARG_WITH([abduco],
	[AS_HELP_STRING([--with-abduco],
			[Use builtin abduco (default: auto)])],
	[],
	[: m4_divert_text([DEFAULTS], [with_abduco=auto])])
AC_MSG_CHECKING([if builtin abduco is required])
if test "$with_abduco" != "no"; then
	if test "$with_abduco" = "auto"; then
		with_abduco=no
		if ! test -x "$abduco_prog"; then
			with_abduco=yes
		fi
		if ! "$abduco_prog" --help 2>&1 | grep -qs -e '-L '; then
			with_abduco=yes
		fi
	fi
	if test "$with_abduco" = "yes" && ! test -f "$srcdir/external/abduco/upstream/Makefile"; then
		AC_MSG_FAILURE([submodule 'abduco' is out of sync])
	fi
fi
AC_MSG_RESULT([$with_abduco])
AC_SUBST([USE_ABDUCO], [$with_abduco])

AC_ARG_WITH([help2man],
	[AS_HELP_STRING([--with-help2man=FILE],
			[Path to help2man utility (default: auto)])],
	[], [])
if ! test -x "$with_help2man"; then
	AC_PATH_PROGS([with_help2man], [help2man])
fi
AC_SUBST([HELP2MAN], [$with_help2man])

# Checks for libraries.
AC_ARG_WITH([zlib],
	[AS_HELP_STRING([--with-zlib],
			[support zlib compression @<:@default=yes@:>@])],
	[],
	[: m4_divert_text([DEFAULTS], [with_zlib=yes])])

AS_IF([test "x$with_zlib" != xno],
	[PKG_CHECK_MODULES(HAVE_GZIP, zlib, [HAVE_GZIP=yes], [HAVE_GZIP=no])],
	[HAVE_GZIP=no])

AC_ARG_WITH([bzip2],
	[AS_HELP_STRING([--with-bzip2],
			[support bzip2 compression @<:@default=yes@:>@])],
	[],
	[: m4_divert_text([DEFAULTS], [with_bzip2=yes])])

AS_IF([test "x$with_bzip2" != xno],
	[PKG_CHECK_MODULES(HAVE_BZIP2, bzip2, [HAVE_BZIP2=yes], [HAVE_BZIP2=no])],
	[HAVE_BZIP2=no])

AC_ARG_WITH([lzma],
	[AS_HELP_STRING([--with-lzma],
			[support lzma compression @<:@default=yes@:>@])],
	[],
	[: m4_divert_text([DEFAULTS], [with_lzma=yes])])

AS_IF([test "x$with_lzma" != xno],
	[PKG_CHECK_MODULES(HAVE_LZMA, liblzma, [HAVE_LZMA=yes], [HAVE_LZMA=no])],
	[HAVE_LZMA=no])

AC_ARG_WITH([zstd],
	[AS_HELP_STRING([--with-zstd],
			[support zstd compression @<:@default=yes@:>@])],
	[],
	[: m4_divert_text([DEFAULTS], [with_zstd=yes])])

AS_IF([test "x$with_zstd" != xno],
	[PKG_CHECK_MODULES(HAVE_ZSTD, libzstd, [HAVE_ZSTD=yes], [HAVE_ZSTD=no])],
	[HAVE_ZSTD=no])

AC_ARG_WITH([libelf],
	[AS_HELP_STRING([--with-libelf],
			[use elf to detect file types @<:@default=yes@:>@])],
	[],
	[: m4_divert_text([DEFAULTS], [with_libelf=yes])])

AS_IF([test "x$with_elf" != xno],
	[PKG_CHECK_MODULES(HAVE_LIBELF, libelf, [HAVE_LIBELF=yes], [HAVE_LIBELF=no])],
	[HAVE_LIBELF=no])

PKG_CHECK_MODULES(HAVE_LIBKMOD, libkmod, [HAVE_LIBKMOD=yes], [HAVE_LIBKMOD=no])

AS_IF([test "x$HAVE_LIBKMOD" != xyes],
	[AC_MSG_ERROR([libkmod was not found: https://git.kernel.org/pub/scm/utils/kernel/kmod/kmod.git])])

AC_ARG_WITH([feature-bootloader],
	[AS_HELP_STRING([--with-feature-bootloader],
			[build bootloader feature (default: auto)])],
	[],
	[: m4_divert_text([DEFAULTS], [with_feature_bootloader=auto])])

USE_FEATURE_BOOTLOADER=no
HAVE_LIBNEWT=no
HAVE_LIBSLANG=no
HAVE_LIBINIPARSER=no

if test "x$with_feature_bootloader" != xno; then
	PKG_CHECK_MODULES(HAVE_LIBNEWT, libnewt, [HAVE_LIBNEWT=yes], [HAVE_LIBNEWT=no]);
	PKG_CHECK_MODULES(HAVE_LIBSLANG, slang, [HAVE_LIBSLANG=yes], [HAVE_LIBSLANG=no]);
	AC_CHECK_LIB(iniparser, iniparser_load, [
		HAVE_LIBINIPARSER=yes
		HAVE_LIBINIPARSER_LIBS=-liniparser
		HAVE_LIBINIPARSER_CFLAGS=''
	], [HAVE_LIBINIPARSER=no])

	if test "x$HAVE_LIBINIPARSER" = xyes; then
		AC_CHECK_HEADERS([iniparser.h iniparser/iniparser.h])
		if test "x$ac_cv_header_iniparser_iniparser_h" = "xyes"; then
			HAVE_LIBINIPARSER_CFLAGS="-I${includedir}/iniparser"
		fi
	fi

	if test "x$with_feature_bootloader" != xauto; then
		AS_IF([test "x$HAVE_LIBNEWT" != xyes],
			[AC_MSG_ERROR([libnewt was not found: https://fedorahosted.org/releases/n/e/newt/])])
		AS_IF([test "x$HAVE_LIBSLANG" != xyes],
			[AC_MSG_ERROR([slang was not found: https://www.jedsoft.org/slang/])])
		AS_IF([test "x$HAVE_LIBINIPARSER" != xyes],
			[AC_MSG_ERROR([libiniparser was not found: https://github.com/ndevilla/iniparser])])
	fi

	if test "x-$HAVE_LIBNEWT-$HAVE_LIBSLANG-$HAVE_LIBINIPARSER" = x-yes-yes-yes; then
		USE_FEATURE_BOOTLOADER=yes
	fi
fi

AC_SUBST([HAVE_GZIP])
AC_SUBST([HAVE_BZIP2])
AC_SUBST([HAVE_LZMA])
AC_SUBST([HAVE_ZSTD])
AC_SUBST([HAVE_LIBELF])
AC_SUBST([HAVE_LIBKMOD])
AC_SUBST([HAVE_LIBNEWT])
AC_SUBST([HAVE_LIBSLANG])
AC_SUBST([HAVE_LIBINIPARSER])
AC_SUBST([HAVE_LIBINIPARSER_LIBS])
AC_SUBST([HAVE_LIBINIPARSER_CFLAGS])
AC_SUBST([USE_FEATURE_BOOTLOADER])
AC_SUBST([MKLOCAL])

AC_CONFIG_FILES([Makefile])
AC_OUTPUT
