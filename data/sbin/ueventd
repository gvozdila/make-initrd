#!/bin/bash -eu

. shell-error
. shell-signal

. /.initrd/initenv
. uevent-sh-functions

message_time=1

pidfile="/var/run/$PROG.pid"
logfile="/var/log/$PROG.log"
queuetimer="/.initrd/uevent/.queue-timer"
inotifyd='/sbin/inotifyd'

[ "${RDLOG-}" != 'console' ] ||
	logfile=/dev/console

UEVENT_MODE="${UEVENT_MODE:-server}"

if [ "$UEVENT_MODE" = 'server' ]; then
	exec >"$logfile" 2>&1

	message "Starting server ..."

	[ -d "$filterdir" ] ||
		fatal "$filterdir: bad directory"

	echo "$$" > "$pidfile"
	:> "$queuetimer"

	exit_handler()
	{
		local d rc="$?"
		trap - EXIT
		for d in "$filterdir"/*; do
			[ ! -d "$d" ] || [ ! -f "$d.pid" ] ||
				rm -f -- "$d.pid"
		done
		[ ! -f "$pidfile" ] ||
			rm -f -- "$pidfile"
		exit $rc
	}
	set_cleanup_handler exit_handler

	export UEVENT_MODE='queue-processor'

	for d in "$filterdir"/*; do
		[ ! -d "$d" ] || "$0" "n" "${d%/*}" "${d##*/}"
	done

	{
		while [ -f "$pidfile" ]; do
			:> "$queuetimer"
			sleep 1
		done
	} &

	"$inotifyd" "$0" "$pidfile:x" "$filterdir:nd" &
	wait

	exit 0
fi

evtype="$1"
name="${3-}"
event="$2${name:+/$name}"

if [ "$UEVENT_MODE" = 'queue-processor' ]; then
	case "$evtype" in
		n)
			[ -d "$event" ] && [ -n "${name##.*}" ] ||
				exit 0

			export UEVENT_MODE='queue-handler'
			export QUEUE="$name"

			message "$QUEUE: Starting sub-process ..."

			mkdir -p -- "$ueventdir/$QUEUE"

			:> "$event.pid"
			"$inotifyd" "$0" "$pidfile:x" "$event.pid:x" "$queuetimer:w" "$event:ny" &
			echo "$!" >"$event.pid"
			;;
		d)
			[ ! -d "$event" ] || [ ! -f "$event.pid" ] ||
				rm -f -- "$event.pid"
			;;
		x)
			kill "$PPID"
			;;
	esac
	exit 0
fi

[ "$UEVENT_MODE" = 'queue-handler' ] ||
	fatal "unexpected mode: $UEVENT_MODE"

if [ "$evtype" = 'x' ]; then
	kill "$PPID"
	exit 0
fi

udevadm settle --timeout=3 ||:

glob()
{
	[ -e "$1" ]
}

queuedir="$ueventdir/$QUEUE"

mv -f -- "$2"/* "$queuedir" 2>/dev/null ||:
glob "$queuedir"/* || exit 0

message "$QUEUE: Processing events ..."

for ev in "$queuedir"/*; do
	message "$QUEUE: event $ev"
done

get_name()
{
	[ ! -d "$fn" ] && [ -x "$fn" ] || return 1
	name="${fn##*/}"
	name="${name#[0-9][0-9][0-9]-}"
}

run_scripts()
{
	local exe rc
	for exe in "/lib/uevent/each/$1"/*; do
		[ -x "$exe" ] || continue
		message "$2: Running $1 scripts ..."
		"$exe" "$2" ||:
	done
}

for fn in "$handlerdir/$QUEUE"/*; do
	get_name || continue

	run_scripts pre "$QUEUE"

	message "$QUEUE: Running queue-specific $name handler ..."
	"$fn" "$queuedir" || message "$QUEUE: Event handler failed: $name"

	run_scripts post "$QUEUE"
done

for fn in "$handlerdir"/*; do
	get_name && glob "$queuedir/$name".* || continue

	run_scripts pre "$QUEUE"

	message "$QUEUE: Running $name handler ..."
	"$fn" || message "$QUEUE: Event handler failed: $name"

	run_scripts post "$QUEUE"
done
